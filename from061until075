package java200;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;

public class javaFrom061Until075 {

	public static void main(String[] args) {
		java061(); java062(); java063(); java064(); java065();
		java066(); java067(); java068(); java069(); java070();
		java071(); java072(); java073(); java074(); java075();
	}

	public static void java075() {
		String st = "2020-03-04";
		Calendar d2 = todate(st);
		System.out.println(toYMD(d2));
		String st2 = goGo(st, -7);
		System.out.println(st2);
		Calendar d3 = todate(st2);
		System.out.println(toYMD(d3));

		TimeZone tz = TimeZone.getDefault();
		Calendar cal = Calendar.getInstance(tz);
		System.out.println(toYMD2(cal));

		TimeZone tzNY = TimeZone.getTimeZone("America/New_York");
		Calendar calNY = Calendar.getInstance(tzNY);
		System.out.println(toYMD2(calNY));
	}

	public static Calendar todate(String ss) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date dd = new Date();
		try {
			dd = sdf.parse(ss);
		} catch (ParseException e) {
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(dd);
		return cal;
	}

	public static String toYMD(Calendar dd) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(dd.getTime());
	}

	public static String toYMD2(Calendar dd) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(dd.getTime());
	}

	public static String goGo(String ss, int day) {
		Calendar cal = todate(ss);
		cal.add(Calendar.DAY_OF_YEAR, day);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(cal.getTime());
	}

	public static void java074() {
		long millis = System.currentTimeMillis();
		System.out.println(millis / 1000 / 24 / 60 / 60);

		Date d = new Date();
		System.out.println(d);
		Date dd = new Date(d.getTime() + 24 * 60 * 60 * 1000);
		System.out.println(dd);

		Calendar cal1970 = Calendar.getInstance();
		cal1970.set(1970, 1 - 1, 1);

		Calendar today = Calendar.getInstance();
		printCalendar(today);
		long minus = today.getTimeInMillis() - cal1970.getTimeInMillis();
		System.out.println(minus);
		System.out.println(minus / 1000 / 24 / 60 / 60);
	}

	public static void printCalendar(Calendar c) {
		System.out.println("-----------------------");
		System.out.println(c.get(Calendar.YEAR));
		System.out.println(c.get(Calendar.MONTH) + 1);
		System.out.println(c.get(Calendar.DAY_OF_MONTH));
		System.out.println(c.get(Calendar.AM_PM));
		System.out.println(c.get(Calendar.HOUR_OF_DAY));
		System.out.println(c.get(Calendar.MINUTE));
		System.out.println(c.get(Calendar.SECOND));
	}

	public static void java073() {
		System.out.println("Math.E " + Math.E);
		System.out.println("Math.PI " + Math.PI);
		System.out.println("Math.abs(-5) 절대값 : " + Math.abs(-5));
		System.out.println("Math.ceil(4.34) 올림 : " + Math.ceil(4.34));
		System.out.println("Math.round(4.5) 반올림 : " + Math.round(4.5));
		System.out.println("Math.floor(4.34) 버림 : " + Math.abs(4.34));
		System.out.println("Math.rint(4.51) 반올림 : " + Math.rint(4.51));
		System.out.println("Math.max(45,78) " + Math.max(45, 78));
		System.out.println("Math.min(45,78) " + Math.min(45, 78));
		System.out.println("Math.pow(2,4) " + Math.pow(2, 4));
		System.out.println("Math.log(30) " + Math.log(30));
		System.out.println("Math.exp(3) " + Math.exp(3));
		System.out.println("Math.sqrt(10) " + Math.sqrt(10));
		double dRan = Math.random();
		System.out.println("Math.random()=> " + dRan);
	}

	public static void java072() {
		long namotime = System.nanoTime();
		for (int i = 0; i < 100000; i++) {
			System.out.print("");
		}
		long namotime2 = System.nanoTime();
		System.out.println(namotime2 - namotime);
		System.out.println(System.getenv("JAVA_HOME"));
		Map<String, String> map = System.getenv();
		Iterator<String> iter = map.keySet().iterator();
		int j = 0;
		while (iter.hasNext()) {
			String keys = iter.next();
			System.out.println((++j + " ") + keys + " : " + map.get(keys));
		}
	}

	public static void java071() {
		long ltime = System.currentTimeMillis();
		System.out.println(ltime);
		for (int i = 0; i < 100000; i++) {
			System.out.print("");
		}
		long ltime2 = System.currentTimeMillis();
		System.out.println(ltime2 - ltime);
		System.out.println(ltime2 / 1000 / 60 / 60 / 24 / 365 + "년");
		Properties pro = System.getProperties();
		System.out.println(pro.getProperty("java.vm.version"));
		System.out.println(pro.getProperty("file.separator"));

		System.out.println(new Date(System.currentTimeMillis()));
		Enumeration<Object> en = pro.keys();
		int i = 0;
		while (en.hasMoreElements()) {
			String keys = (String) en.nextElement();
			System.out.println((++i + " ") + keys + " : " + pro.getProperty(keys));
		}
	}

	public static void java070() {
		StringBuilder sbu = new StringBuilder();
		sbu.append("I").append(" go").append(" to school.");
		System.out.println(sbu);
		sbu.replace(7, 11, "");
		System.out.println(sbu);
		sbu.reverse();
		System.out.println(sbu);
		sbu.deleteCharAt(3);
		System.out.println(sbu);
		sbu.delete(1, 3);
		System.out.println(sbu);
		String ss = sbu.substring(0);
		System.out.println(ss);
		System.out.println(sbu);
		String st = sbu.substring(0, 4);
		System.out.println(st);
		System.out.println(sbu);
	}

	public static void java069() {
		StringBuffer sb1 = new StringBuffer();
		sb1.append("안녕하세요.").append("또 만나요.").append("모두를 사랑해요. 기다려봐.");
		System.out.println(sb1.toString() + sb1.hashCode());
		sb1.replace(0, 2, "나 보기가 역겨워");
		System.out.println(sb1.toString() + sb1.hashCode());
		sb1.reverse();
		System.out.println(sb1.toString());
		sb1.delete(10, 15);
		System.out.println(sb1.toString());
		replaces(sb1);
		System.out.println(sb1.toString());
	}

	public static void replaces(StringBuffer sb) {
		sb.reverse();
		sb.replace(0, 3, "GoGo");
	}

	public static void java068() {
		Object obj1 = new Object();
		try {
			Class classes = Class.forName("java.lang.String");
			System.out.println("--------Method 찾기--------");
			Method[] mes = classes.getDeclaredMethods();
			for (Method me : mes) {
				if (me.getModifiers() > 4000) {
					continue;
				}
				System.out.printf("%s\t\t", toModi(me.getModifiers()));
				System.out.printf("%-30s\t\t", toRe(me.getReturnType().toString()));
				System.out.printf("%s", me.getName());
				System.out.printf("(", "");
				Class[] aa = me.getParameterTypes();
				for (int j = 0; j < aa.length; j++) {
					System.out.printf("%s", toRe(aa[j].getName()));
					if (j != aa.length - 1) {
						System.out.println(",");
					}
				}
				System.out.printf(")", "");
				System.out.println();
			}
			System.out.println("--------생성자 찾기--------");
			Constructor[] constructors = classes.getDeclaredConstructors();
			for (Constructor con : constructors) {
				System.out.println(con.getName());
				System.out.printf("(", "");
				Class[] aa = con.getParameterTypes();
				for (int j = 0; j < aa.length; j++) {
					System.out.printf("%s", toRe(aa[j].getName()));
					if (j != aa.length - 1) {
						System.out.print(",");
					}
				}
				System.out.printf(")", "");
				System.out.println();
			}
		} catch (ClassNotFoundException e) {
			System.out.println(e);
		}
	}

	public static String toModi(int n) {
		String s = "";
		switch (n) {
		case 0:	s = " "; break;
		case 1:	s = "public"; break;
		case 2:	s = "private"; break;
		case 4:	s = "protected"; break;
		case 8:	s = "static"; break;
		case 10: s = "private static"; break;
		case 9:
		case 137: s = "public static"; break;
		case 17: s = "public final"; break;
		case 257: s = "public native"; break;
		case 260: s = "protected native"; break;
		case 273: s = "public final native"; break;
		default: s = "xxxx"; break;
		}
		return s;
	}

	public static String toRe(String msg) {
		String s = "";
		if (msg.indexOf("[") != -1) {
			if (msg.contains("[C")) {
				s = msg.substring(msg.indexOf(" ") + 1).trim();
				s = s.replace("[C", "char[]");

			} else if (msg.contains("[L")) {
				s = msg.substring(msg.indexOf(" ") + 1).trim();
				s = s.replace("[L", "").replace(";", "");
				s = s.concat("[]");
			} else if (msg.contains("[B")) {
				s = msg.substring(msg.indexOf(" ") + 1).trim();
				s = s.replace("[B", "byte[]");
			}
		} else if (msg.indexOf(" ") != -1) {
			s = msg.substring(msg.indexOf(" ") + 1).trim();
		} else {
			s = msg.trim();
		}
		return s;
	}

	public static void java067() {
		String text = " Hello java4Android";
		String com = " HEllo java4Android";

		System.out.println(text.charAt(2));
		System.out.println(text.concat("s"));
		System.out.println(text.contains("And"));
		System.out.println(text.equals(com));
		System.out.println(text.equalsIgnoreCase(com));
		System.out.println(text.indexOf("a"));
		System.out.println(text.lastIndexOf("a"));
		System.out.println(text.trim());
		System.out.println(text.length());
		System.out.println(text.substring(7));
		System.out.println(text.substring(7, 11));
		System.out.println(text.replace(" ", "-"));
		System.out.println(text.toUpperCase());
		System.out.println(text.toLowerCase());

		String[] sp = text.split(" ");
		for (int i = 0; i < sp.length; i++) {
			System.out.println(i + "\t\t" + sp[i] + "\t\t" + sp[i].length());
		}
	}

	public static void java066() {
		String city1 = "Asia";
		String city2 = "Europe";
		String city3 = new String("Asia");
		String city7 = "Asia";
		System.out.println(city1);
		System.out.println(city1.length());
		System.out.println(city1 == city2);
		System.out.println(city1.equals(city2));
		System.out.println(city1 == city3);
		System.out.println(city1 == city7);
		System.out.println(city1.equals(city3));
		System.out.println(city1.equals(city7));

		String city4 = String.format("%s-%s", city1, city2);
		System.out.println(city4);
		String city5 = city1 + "-" + city2 + 1 + 2;
		System.out.println(city5);
		String city6 = 1 + 2 + city1 + "-" + city2;
		System.out.println(city6);
	}

	public static void java065() {
		Object obj1 = new Object();
		Class classes = obj1.getClass();
		System.out.println(classes.getName());
		System.out.println("--------constructor--------");
		Constructor[] constructor = classes.getDeclaredConstructors();
		for (Constructor con : constructor) {
			System.out.println(con.getName());
		}
		System.out.println("--------Method--------");
		Method[] method = classes.getMethods();
		for (Method me : method) {
			System.out.println(me.getName());
		}
	}

	public static void java064() {
		Object obj1 = new Object();
		Object obj2 = new Object();

		System.out.println(obj1.hashCode());
		System.out.println(Integer.toHexString(obj1.hashCode()));
		System.out.println(obj1 == obj2);
		System.out.println(obj1.equals(obj2));
		System.out.println(obj1);
		System.out.println(obj2.toString());

		System.out.println(obj1.getClass().getName());
		String str = obj1.getClass().getName() + "@" + Integer.toHexString(obj1.hashCode());
		System.out.println(str);

		Object objstr = new String("Good");
		System.out.println(objstr.toString());
		System.out.println(objstr instanceof Object);
		System.out.println(objstr instanceof String);

		String hello = "hello";
		System.out.println(hello.getClass());
	}

	public static void java063() {
		try {
			int x = 5;
			int y = 20 / (5 - x);
			System.out.println(y);
		} catch (ArithmeticException e) {
			System.out.println("==> 0으로 나눴나 확인해 봐!!!");
		} finally {
			System.out.println("난 수행되어야만 해!!!");
		}
	}

	public static void java062() {
		String sNum = "123";
		String nNum = "h";
		try {
			int a = Integer.parseInt(sNum);
			System.out.println(a);
		} catch (NumberFormatException ee) {
			System.out.println("int인지 확인해 봐!!!!");
			System.err.println(ee.getMessage());
		} catch (Exception ee) {
			System.out.println("야 잘 좀 넣어");
		} finally {
			System.out.println("난 수행되어야만 해!!!");
		}
	}

	public static void java061() {
		int ival = 2345;
		int eval = -2345;
		String vals = makeBit(ival);
		System.out.println(vals);
		vals = makeBit(eval);
		System.out.println(vals);
		char[] vs = vals.toCharArray();
		System.out.println(vs[0]);
	}

	public static final int BITMASK = 1;

	public static String makeBit(int value) {
		char[] val = new char[32];
		for (int i = 31; i >= 0; i--) {
			if ((value & BITMASK) == 1) {
				val[i] = '1';
			} else {
				val[i] = '0';
			}
			value >>>= 1;
		}

		return new String(val);
	}

}
